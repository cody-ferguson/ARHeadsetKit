@Tutorial(time: 15, projectFiles: "Setting-Up-ARHeadsetKit.zip") {
    @XcodeRequirement(
            title: "Xcode 13.1",
            destination: "https://developer.apple.com/download/")
    
    @Intro(title: "Setting Up ARHeadsetKit") {
        Walk through how to build an augmented reality app based on ARHeadsetKit.
        
        Download the project files to begin building this project, and follow the steps below.
        
        @Image(source: "1-1-image-2-1-intro.jpg", alt: "The blue cone appearing in AR.")
    }
    
    @Section(title: "Declare a Custom Renderer") {
        @ContentAndMedia {
            Every ARHeadsetKit app starts with a custom renderer. This class communicates with the ``ARHeadsetKit/MainRenderer``, responding to your surroundings and rendering content. 
        }
        
        @Steps {
            @Step {
                Go to the downloaded project files. Open the Xcode project inside the "StartingPoint" folder.
                
                @Image(source: "1-1-image-1-1.png", alt: "Selecting StartingPoint in the project files.")
            }

            @Step {
                Navigate to a file named `Sample_CodeApp.swift` in the project navigator. Right-click on it and select New File -> Swift File -> Next. Name the file `MyRenderer.swift` and click Create.
                
                @Image(source: "1-1-image-1-2.png", alt: "Sample_CodeApp.swift being selected in the project navigator.")
            }
            
            @Step {
                In `MyRenderer.swift`, import ARHeadsetKit and Metal. 
                
                @Code(name: "MyRenderer.swift", file: "1-1-creating-code-1-1.swift", previousFile: "creating-code-template.swift")
            }
            
            @Step {
                Declare a class called `MyRenderer`, with a stored property that references a `MainRenderer`.
                
                > Tip: Add the `unowned` modifier to stored references to parent renderers. Otherwise, you will create strong reference cycles and prevent deinitialization.
                
                @Code(name: "MyRenderer.swift", file: "1-1-creating-code-1-2.swift")
            }
            
            @Step {
                Create an initializer that takes a `MainRenderer` and an optional `MTLLibrary`, then initialize the value of `renderer`.
                
                Adding the `required` keyword to the initializer allows `MyRenderer` to conform to ``ARHeadsetKit/CustomRenderer``.
                
                @Code(name: "MyRenderer.swift", file: "1-1-creating-code-1-3.swift")
            }
            
            @Step {
                Create method called `updateResources()`. Then, add `drawGeometry(renderEncoder:)`, which takes an ``ARHeadsetKit/ARMetalRenderCommandEncoder`` parameter.
                
                @Code(name: "MyRenderer.swift", file: "1-1-creating-code-1-4.swift")
            }
            
            @Step {
                Declare that `MyRenderer` conforms to the `CustomRenderer` protocol.
                
                @Code(name: "MyRenderer.swift", file: "1-1-creating-code-1-5.swift")
            }
            
            @Step {
                In `updateResources()`, create a cone object. Set its position to the origin and scale it by 0.2 meters in each dimension.
                
                > Tip: Put each parameter onto a separate line to make the initializer easy to read.
                
                @Code(name: "MyRenderer.swift", file: "1-1-creating-code-1-6.swift")
            }
            
            @Step {
                Send the cone to ``ARHeadsetKit/DelegateRenderer/centralRenderer`` to present it in AR, by calling ``ARHeadsetKit/CentralRenderer/render(object:)``.
                
                @Code(name: "MyRenderer.swift", file: "1-1-creating-code-1-7.swift")
            }
        }
    }
    
    @Section(title: "Link to SwiftUI") {
        @ContentAndMedia {
            To draw AR content, your code must communicate with ARHeadsetKit. You'll pass the initializer of `MyRenderer` up through the following hierarchy of objects:
            
            - `AppCoordinator`
              - `MainRenderer`
                - `MyRenderer`
        }
        
        @Steps {
            @Step {
                In the project navigator, select `ContentView.swift`. Import ARHeadsetKit at the top of the file.
                
                @Code(name: "ContentView.swift", file: "1-1-creating-code-2-2.swift", previousFile: "1-1-creating-code-2-1.swift")
            }
            
            @Step {
                Delete `ContentView_Previews`. You do not need this SwiftUI preview because the app's content cannot be simulated in Xcode.
                
                @Code(name: "ContentView.swift", file: "1-1-creating-code-2-3.swift")
            }
            
            @Step {
                Create a subclass of `MainRenderer` called `MyApp_MainRenderer`. Override `makeCustomRenderer` with the `MyRenderer`'s initializer. 
                
                @Code(name: "ContentView.swift", file: "1-1-creating-code-2-4.swift")
            }
            
            @Step {
                Repeat the previous step with a subclass of `AppCoordinator` called `Coordinator`. Use the `MyApp_MainRenderer`'s initializer.
                
                @Code(name: "ContentView.swift", file: "1-1-creating-code-2-5.swift")
            }
            
            @Step {
                Replace the body of `ContentView` with an ``ARHeadsetKit/ARContentView``. Set an instance of `Coordinator` as its environment object.
                
                @Code(name: "ContentView.swift", file: "1-1-creating-code-2-6.swift")
            }
            
            @Step {
                Launch the app on your iPhone or iPad. Read the in-app tutorial thoroughly, then step back and observe the blue cone. 
                
                Congratulations! You made your first experience with ARHeadsetKit!
                
                @Image(source: "1-1-image-2-1.jpg", alt: "The blue cone appearing in AR.")
            }
        }
    }
}
